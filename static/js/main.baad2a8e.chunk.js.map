{"version":3,"sources":["cell/Cell.model.ts","settingHooks.ts","cell/Cell.tsx","labyrinth/Labyrinth.tsx","App.tsx","generator.ts","labyrinth/Labyrinth.model.ts","reportWebVitals.ts","index.tsx"],"names":["EWallPosition","createClosedCell","x","y","walls","createCell","removeWall","cell","wallPos","removeTopWall","Top","removeBottomWall","Bottom","store","state","CellWidth","CellHeight","LineWidth","setters","setState","newState","forEach","setter","useSettings","useState","includes","push","useEffect","filter","bind","Cell","pathData","setPathData","moveTo","leftWall","Left","left","bottomWall","bottom","rightWall","Right","right","topWall","top","stroke","fill","d","strokeWidth","Labyrinth","cells","height","width","viewbox","setViewBox","newViewbox","field","map","index","className","id","xmlns","viewBox","print","l","document","getElementById","a","window","open","write","outerHTML","close","App","setWidth","setHeight","settings","setSettings","drawer","toggleDrawer","setCells","toggleHandler","Classes","DARK","Group","align","Alignment","LEFT","Heading","onClick","newCells","labyrinth","_cells","row","_cell","visits","visitedCount","isCellPresent","currentX","Math","floor","random","currentY","nextCellX","nextCellY","directionFound","direction","opposite","auldosBroderGenerator","initLabyrinth","icon","RIGHT","minimal","Divider","elevation","Elevation","THREE","isOpen","onClose","position","Position","size","Drawer","SIZE_SMALL","title","label","labelFor","inline","onValueChange","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.baad2a8e.chunk.js","sourcesContent":["export enum EWallPosition {\r\n  Top,\r\n  Right,\r\n  Bottom,\r\n  Left,\r\n};\r\n\r\nexport interface ICellModel {\r\n  x: number;\r\n  y: number;\r\n  walls: boolean[];\r\n}\r\n\r\nexport function createCell(x: number, y: number, walls: boolean[] = [false, false, false, false]) {\r\n  const cell: ICellModel = {\r\n    x,\r\n    y,\r\n    walls,\r\n  };\r\n  return cell;\r\n}\r\n\r\nexport function createClosedCell(x: number, y: number) {\r\n  return createCell(x, y, [true, true, true, true]);\r\n}\r\n\r\nexport function setWall(cell: ICellModel, wallPos: EWallPosition) {\r\n  const walls = [...cell.walls];\r\n  walls[wallPos] = true;\r\n  return {\r\n    ...cell,\r\n    walls,\r\n  } as ICellModel;\r\n}\r\n\r\nexport function setTopWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Top);\r\n}\r\n\r\nexport function setRightWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Right);\r\n}\r\n\r\nexport function setBottomWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Bottom);\r\n}\r\n\r\nexport function setLeftWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Left);\r\n}\r\n\r\nexport function removeWall(cell: ICellModel, wallPos: EWallPosition) {\r\n  const walls = [...cell.walls];\r\n  walls[wallPos] = false;\r\n  return {\r\n    ...cell,\r\n    walls,\r\n  } as ICellModel;\r\n}\r\n\r\nexport function removeTopWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Top);\r\n}\r\n\r\nexport function removeRightWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Right);\r\n}\r\n\r\nexport function removeBottomWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Bottom);\r\n}\r\n\r\nexport function removeLeftWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Left);\r\n}\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\n\r\ninterface ISettings {\r\n  CellWidth: number;\r\n  CellHeight: number;\r\n  LineWidth: number;\r\n}\r\n\r\ntype SetStateHandler = (newState: ISettings) => void;\r\n\r\ninterface ISettingsStore {\r\n  state: ISettings;\r\n  setters: Dispatch<SetStateAction<ISettings>>[];\r\n  setState: SetStateHandler;\r\n}\r\n\r\nclass SettingsStore implements ISettingsStore {\r\n  state: ISettings = {\r\n    CellWidth: 20,\r\n    CellHeight: 20,\r\n    LineWidth: 2,\r\n  };\r\n  setters: Dispatch<SetStateAction<ISettings>>[] = [];\r\n  setState: SetStateHandler = (newState: ISettings) => {\r\n    this.state = newState;\r\n    this.setters.forEach((setter) => setter(this.state));\r\n  }\r\n}\r\n\r\nconst store: ISettingsStore = new SettingsStore();\r\nstore.setState.bind(store);\r\n\r\nexport function useSettings(): [ settings: ISettings, setSettings: (newState: ISettings) => void ] {\r\n  const [ state, setState ] = useState(store.state);\r\n  if(!store.setters.includes(setState)) {\r\n    store.setters.push(setState);\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.setters = store.setters.filter(setter => setter !== setState);\r\n    }\r\n  }, []);\r\n\r\n  return [ state, store.setState ];\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useSettings } from '../settingHooks';\r\nimport { EWallPosition, ICellModel } from './Cell.model';\r\n\r\nexport interface ICellProps {\r\n  cell: ICellModel;\r\n}\r\n\r\nconst Cell: React.FC<ICellProps> = ({ cell }) => {\r\n  const [{ CellHeight, CellWidth, LineWidth }] = useSettings();\r\n  const [ pathData, setPathData ] = useState('');\r\n  useEffect(() => {\r\n    const { walls, x, y } = cell;\r\n    const moveTo = `M${x * CellWidth} ${y * CellHeight}`;\r\n    const leftWall = walls[EWallPosition.Left];\r\n    const left = `${leftWall ? 'l' : 'm'}0 ${CellHeight}`;\r\n    const bottomWall = walls[EWallPosition.Bottom];\r\n    const bottom = `${bottomWall ? 'l' : 'm'}${CellWidth} 0`;\r\n    const rightWall = walls[EWallPosition.Right];\r\n    const right = `${rightWall ? 'l' : 'm'}0 -${CellHeight}`;\r\n    const topWall = walls[EWallPosition.Top];\r\n    const top = `${topWall ? 'l' : 'm'}-${CellWidth} 0`;\r\n    const pathData = `${moveTo} ${left} ${bottom} ${right} ${top}`;\r\n    setPathData(pathData);\r\n  }, [ CellHeight, CellWidth, cell ]);\r\n  return <path stroke=\"#333\" fill=\"none\" d={pathData} strokeWidth={LineWidth} />;\r\n};\r\nexport default Cell;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Cell from '../cell/Cell';\r\nimport { ICellModel } from '../cell/Cell.model';\r\nimport { useSettings } from '../settingHooks';\r\nimport { LabyrinthCells } from './Labyrinth.model';\r\n\r\nexport interface ILabyrinthProps {\r\n  cells: LabyrinthCells;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\nconst Labyrinth: React.FC<ILabyrinthProps> = ({ cells, height, width }) => {\r\n  const [viewbox, setViewBox] = useState<string>(`0 0 400 400`);\r\n  const [{ CellHeight, CellWidth }] = useSettings();\r\n  useEffect(() => {\r\n    const newViewbox = `0 0 ${width * CellWidth} ${height * CellHeight}`;\r\n    setViewBox(newViewbox);\r\n  }, [height, width, CellHeight, CellWidth]);\r\n  const drawRow = (cells: ICellModel[], index: number) => (\r\n    <g className=\"row\" key={index}>\r\n      {cells.map((cell) => (\r\n        <Cell cell={cell} key={`${cell.x}-${cell.y}`} />\r\n      ))}\r\n    </g>\r\n  );\r\n  const field = <>{cells.map(drawRow)}</>;\r\n  return (\r\n    <>\r\n      <svg id=\"labyrinth\" className=\"labyrinth-canvas\" xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox}>\r\n        <g className=\"labyrinth-box\">\r\n          {field}\r\n        </g>\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\nexport default Labyrinth;\r\n","import {\n  Alignment,\n  Button,\n  Card,\n  Classes,\n  Drawer,\n  Elevation,\n  FormGroup,\n  H5,\n  Navbar,\n  NumericInput,\n  Position,\n} from '@blueprintjs/core';\nimport React, { useState } from 'react';\n\nimport './App.css';\nimport { auldosBroderGenerator } from './generator';\n\nimport Labyrinth from './labyrinth/Labyrinth';\nimport { initLabyrinth, LabyrinthCells } from './labyrinth/Labyrinth.model';\nimport { useSettings } from './settingHooks';\n\nfunction print() {\n  const l = document.getElementById('labyrinth');\n  if (!l) {\n    return;\n  }\n  const a = window.open('', '', 'height=640, width=640');\n  if (!a) {\n    return;\n  }\n  a.document.write('<html>');\n  a.document.write('<body>');\n  a.document.write(l.outerHTML);\n  a.document.write('</body></html>');\n  a.document.close();\n  a.print();\n}\n\nfunction App() {\n  const [width, setWidth] = useState(20);\n  const [height, setHeight] = useState(20);\n  const [settings, setSettings] = useSettings();\n  const [drawer, toggleDrawer] = useState(false);\n  const [cells, setCells] = useState<LabyrinthCells>([]);\n  const toggleHandler = () => toggleDrawer(!drawer);\n  const setCellWidth = (CellWidth: number) =>\n    setSettings({\n      ...settings,\n      CellWidth,\n    });\n  const setCellHeight = (CellHeight: number) =>\n    setSettings({\n      ...settings,\n      CellHeight,\n    });\n  const setLineWidth = (LineWidth: number) =>\n    setSettings({\n      ...settings,\n      LineWidth,\n    });\n  const generateAuldosBroder = () => {\n    const l = initLabyrinth(height, width);\n    const newCells = auldosBroderGenerator(l);\n    setCells(newCells);\n  };\n  return (\n    <>\n      <div className={`App ${Classes.DARK}`}>\n        <Navbar>\n          <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>Maze builder</Navbar.Heading>\n            <Button onClick={generateAuldosBroder} icon=\"function\">\n              Aldous-Broder algorythm\n            </Button>\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            <Button icon=\"print\" minimal={true} onClick={print} />\n            <Navbar.Divider />\n            <Button icon=\"cog\" minimal={true} onClick={toggleHandler} />\n          </Navbar.Group>\n        </Navbar>\n        <div className=\"App-body\">\n          <Card className=\"labyrinth-card\" elevation={Elevation.THREE}>\n            <Labyrinth cells={cells} height={height} width={width} />\n          </Card>\n        </div>\n      </div>\n      <Drawer\n        isOpen={drawer}\n        onClose={toggleHandler}\n        position={Position.LEFT}\n        size={Drawer.SIZE_SMALL}\n        title=\"Settings\"\n        className={Classes.DARK}>\n        <Card className=\"settings-card\">\n          <H5>Labyrinth size</H5>\n          <div className=\"size-settings\">\n            <FormGroup label=\"Width\" labelFor=\"width-input\" inline={true}>\n              <NumericInput id=\"width-input\" onValueChange={setWidth} value={width} />\n            </FormGroup>\n            <FormGroup label=\"Height\" labelFor=\"height-input\" inline={true}>\n              <NumericInput id=\"height-input\" onValueChange={setHeight} value={height} />\n            </FormGroup>\n          </div>\n        </Card>\n        <Card className=\"settings-card\">\n          <H5>Drawing settings</H5>\n          <div className=\"draw-settings\">\n            <FormGroup label=\"Cell width\" labelFor=\"cell-width-input\" inline={true}>\n              <NumericInput id=\"cell-width-input\" onValueChange={setCellWidth} value={settings.CellWidth} />\n            </FormGroup>\n            <FormGroup label=\"Cell height\" labelFor=\"cell-height-input\" inline={true}>\n              <NumericInput id=\"cell-height-input\" onValueChange={setCellHeight} value={settings.CellHeight} />\n            </FormGroup>\n            <FormGroup label=\"Line width\" labelFor=\"line-width-input\" inline={true}>\n              <NumericInput id=\"line-width-input\" onValueChange={setLineWidth} value={settings.LineWidth} />\n            </FormGroup>\n          </div>\n        </Card>\n      </Drawer>\n    </>\n  );\n}\n\nexport default App;\n","import { EWallPosition, ICellModel } from './cell/Cell.model';\r\nimport { ILabyrinthModel } from './labyrinth/Labyrinth.model';\r\n\r\nexport function auldosBroderGenerator(labyrinth: ILabyrinthModel) {\r\n  // copy cells\r\n  const _cells = [];\r\n  for (let y = 0; y < labyrinth.height; y++) {\r\n    const row = [];\r\n    for (let x = 0; x < labyrinth.width; x++) {\r\n      const _cell: ICellModel = {\r\n        ...labyrinth.cells[y][x],\r\n      };\r\n      row.push(_cell);\r\n    }\r\n    _cells.push(row);\r\n  }\r\n  // generate visits map\r\n  const visits = [];\r\n  for (let y = 0; y < labyrinth.height; y++) {\r\n    const row = [];\r\n    for (let x = 0; x < labyrinth.width; x++) {\r\n      row.push(false);\r\n    }\r\n    visits.push(row);\r\n  }\r\n  // create counter to detect final state faster\r\n  let visitedCount = 0;\r\n  const allVisited = () => visitedCount === labyrinth.width * labyrinth.height;\r\n  // check if cell is in the labyrinth borders\r\n  const isCellPresent = (x: number, y: number) => x >= 0 && x < labyrinth.width && y >= 0 && y < labyrinth.height;\r\n  // select a cell randomly\r\n  let currentX = Math.floor(Math.random() * labyrinth.width);\r\n  let currentY = Math.floor(Math.random() * labyrinth.height);\r\n  let nextCellX = 0;\r\n  let nextCellY = 0;\r\n  while (!allVisited()) {\r\n    // try to find next cell\r\n    let directionFound = false;\r\n    let direction: EWallPosition = EWallPosition.Top;\r\n    let opposite: EWallPosition = EWallPosition.Bottom;\r\n    while (!directionFound) {\r\n      direction = Math.floor(Math.random() * 4) as EWallPosition;\r\n      switch (direction) {\r\n        case EWallPosition.Top:\r\n          nextCellX = currentX;\r\n          nextCellY = currentY - 1;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Bottom;\r\n          break;\r\n        case EWallPosition.Right:\r\n          nextCellX = currentX + 1;\r\n          nextCellY = currentY;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Left;\r\n          break;\r\n        case EWallPosition.Bottom:\r\n          nextCellX = currentX;\r\n          nextCellY = currentY + 1;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Top;\r\n          break;\r\n        default:\r\n          nextCellX = currentX - 1;\r\n          nextCellY = currentY;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Right;\r\n          break;\r\n      }\r\n    }\r\n    // check if cell was visited\r\n    const isVisited = visits[nextCellY][nextCellX];\r\n    // remove walls if was not visited\r\n    if (!isVisited) {\r\n      // mark and count visit\r\n      visits[nextCellY][nextCellX] = true;\r\n      visitedCount += 1;\r\n      // remove walls\r\n      _cells[currentY][currentX].walls[direction] = false;\r\n      _cells[nextCellY][nextCellX].walls[opposite] = false;\r\n    }\r\n    // set next cell as current\r\n    currentX = nextCellX;\r\n    currentY = nextCellY;\r\n  }\r\n  // return cells\r\n  return _cells\r\n};\r\n","import { createClosedCell, ICellModel, removeBottomWall, removeTopWall } from '../cell/Cell.model';\r\n\r\nexport type LabyrinthCells = ICellModel[][];\r\n\r\nexport interface ILabyrinthModel {\r\n  height: number;\r\n  width: number;\r\n  cells: LabyrinthCells;\r\n}\r\n\r\nexport function initLabyrinth(height: number, width: number, _cells?: LabyrinthCells) {\r\n  let cells = _cells;\r\n  if (!cells) {\r\n    cells = [];\r\n    for (let y = 0; y < height; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < width; x++) {\r\n        let cell = createClosedCell(x, y);\r\n        if (x === 0 && y === 0) {\r\n          cell = removeTopWall(cell);\r\n        }\r\n        if (x === width - 1 && y === height - 1) {\r\n          cell = removeBottomWall(cell);\r\n        }\r\n        row.push(cell);\r\n      }\r\n      cells.push(row);\r\n    }\r\n  }\r\n  return {\r\n    height,\r\n    width,\r\n    cells,\r\n  } as ILabyrinthModel;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import '@blueprintjs/core/lib/css/blueprint.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}