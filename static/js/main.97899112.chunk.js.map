{"version":3,"sources":["cell/Cell.model.ts","generator.ts","settingHooks.ts","cell/Cell.tsx","labyrinth/Labyrinth.tsx","App.tsx","labyrinth/Labyrinth.model.ts","reportWebVitals.ts","index.tsx"],"names":["EWallPosition","EGeneratorAlgorythm","createClosedCell","x","y","walls","createCell","removeWall","cell","wallPos","removeTopWall","Top","removeBottomWall","Bottom","SupportedAlgorythms","label","value","AuldosBroder","auldosBroderGenerator","labyrinth","_cells","height","row","width","_cell","cells","push","visits","visitedCount","isCellPresent","currentX","Math","floor","random","currentY","nextCellX","nextCellY","directionFound","direction","opposite","Right","Left","store","state","CellWidth","CellHeight","LineWidth","setters","setState","newState","forEach","setter","useSettings","useState","includes","useEffect","filter","bind","Cell","pathData","setPathData","moveTo","leftWall","left","bottomWall","bottom","rightWall","right","topWall","top","stroke","fill","d","strokeWidth","Labyrinth","viewbox","setViewBox","newViewbox","field","map","index","className","id","xmlns","viewBox","print","l","document","getElementById","a","window","open","write","outerHTML","close","App","setWidth","setHeight","settings","setSettings","drawer","toggleDrawer","setCells","algorythm","setAlgorythm","toggleHandler","Classes","DARK","Group","align","Alignment","LEFT","Heading","onClick","newCells","initLabyrinth","icon","RIGHT","minimal","Divider","elevation","Elevation","THREE","isOpen","onClose","position","Position","size","Drawer","SIZE_SMALL","title","labelFor","inline","onValueChange","options","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.97899112.chunk.js","sourcesContent":["export enum EWallPosition {\r\n  Top,\r\n  Right,\r\n  Bottom,\r\n  Left,\r\n};\r\n\r\nexport interface ICellModel {\r\n  x: number;\r\n  y: number;\r\n  walls: boolean[];\r\n}\r\n\r\nexport function createCell(x: number, y: number, walls: boolean[] = [false, false, false, false]) {\r\n  const cell: ICellModel = {\r\n    x,\r\n    y,\r\n    walls,\r\n  };\r\n  return cell;\r\n}\r\n\r\nexport function createClosedCell(x: number, y: number) {\r\n  return createCell(x, y, [true, true, true, true]);\r\n}\r\n\r\nexport function setWall(cell: ICellModel, wallPos: EWallPosition) {\r\n  const walls = [...cell.walls];\r\n  walls[wallPos] = true;\r\n  return {\r\n    ...cell,\r\n    walls,\r\n  } as ICellModel;\r\n}\r\n\r\nexport function setTopWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Top);\r\n}\r\n\r\nexport function setRightWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Right);\r\n}\r\n\r\nexport function setBottomWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Bottom);\r\n}\r\n\r\nexport function setLeftWall(cell: ICellModel) {\r\n  return setWall(cell, EWallPosition.Left);\r\n}\r\n\r\nexport function removeWall(cell: ICellModel, wallPos: EWallPosition) {\r\n  const walls = [...cell.walls];\r\n  walls[wallPos] = false;\r\n  return {\r\n    ...cell,\r\n    walls,\r\n  } as ICellModel;\r\n}\r\n\r\nexport function removeTopWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Top);\r\n}\r\n\r\nexport function removeRightWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Right);\r\n}\r\n\r\nexport function removeBottomWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Bottom);\r\n}\r\n\r\nexport function removeLeftWall(cell: ICellModel) {\r\n  return removeWall(cell, EWallPosition.Left);\r\n}\r\n","import { EWallPosition, ICellModel } from './cell/Cell.model';\r\nimport { ILabyrinthModel } from './labyrinth/Labyrinth.model';\r\n\r\nexport enum EGeneratorAlgorythm {\r\n  AuldosBroder,\r\n}\r\n\r\nexport const SupportedAlgorythms = [{ label: 'Auldos-Broder algorythm', value: EGeneratorAlgorythm.AuldosBroder }];\r\n\r\nfunction auldosBroderGenerator(labyrinth: ILabyrinthModel) {\r\n  // copy cells\r\n  const _cells = [];\r\n  for (let y = 0; y < labyrinth.height; y++) {\r\n    const row = [];\r\n    for (let x = 0; x < labyrinth.width; x++) {\r\n      const _cell: ICellModel = {\r\n        ...labyrinth.cells[y][x],\r\n      };\r\n      row.push(_cell);\r\n    }\r\n    _cells.push(row);\r\n  }\r\n  // generate visits map\r\n  const visits = [];\r\n  for (let y = 0; y < labyrinth.height; y++) {\r\n    const row = [];\r\n    for (let x = 0; x < labyrinth.width; x++) {\r\n      row.push(false);\r\n    }\r\n    visits.push(row);\r\n  }\r\n  // create counter to detect final state faster\r\n  let visitedCount = 0;\r\n  const allVisited = () => visitedCount === labyrinth.width * labyrinth.height;\r\n  // check if cell is in the labyrinth borders\r\n  const isCellPresent = (x: number, y: number) => x >= 0 && x < labyrinth.width && y >= 0 && y < labyrinth.height;\r\n  // select a cell randomly\r\n  let currentX = Math.floor(Math.random() * labyrinth.width);\r\n  let currentY = Math.floor(Math.random() * labyrinth.height);\r\n  let nextCellX = 0;\r\n  let nextCellY = 0;\r\n  while (!allVisited()) {\r\n    // try to find next cell\r\n    let directionFound = false;\r\n    let direction: EWallPosition = EWallPosition.Top;\r\n    let opposite: EWallPosition = EWallPosition.Bottom;\r\n    while (!directionFound) {\r\n      direction = Math.floor(Math.random() * 4) as EWallPosition;\r\n      switch (direction) {\r\n        case EWallPosition.Top:\r\n          nextCellX = currentX;\r\n          nextCellY = currentY - 1;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Bottom;\r\n          break;\r\n        case EWallPosition.Right:\r\n          nextCellX = currentX + 1;\r\n          nextCellY = currentY;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Left;\r\n          break;\r\n        case EWallPosition.Bottom:\r\n          nextCellX = currentX;\r\n          nextCellY = currentY + 1;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Top;\r\n          break;\r\n        default:\r\n          nextCellX = currentX - 1;\r\n          nextCellY = currentY;\r\n          directionFound = isCellPresent(nextCellX, nextCellY);\r\n          opposite = EWallPosition.Right;\r\n          break;\r\n      }\r\n    }\r\n    // check if cell was visited\r\n    const isVisited = visits[nextCellY][nextCellX];\r\n    // remove walls if was not visited\r\n    if (!isVisited) {\r\n      // mark and count visit\r\n      visits[nextCellY][nextCellX] = true;\r\n      visitedCount += 1;\r\n      // remove walls\r\n      _cells[currentY][currentX].walls[direction] = false;\r\n      _cells[nextCellY][nextCellX].walls[opposite] = false;\r\n    }\r\n    // set next cell as current\r\n    currentX = nextCellX;\r\n    currentY = nextCellY;\r\n  }\r\n  // return cells\r\n  return _cells;\r\n}\r\n\r\nexport function getGenerator(algorythm: EGeneratorAlgorythm) {\r\n  switch (algorythm) {\r\n    default:\r\n      return auldosBroderGenerator\r\n  }\r\n}\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\n\r\ninterface ISettings {\r\n  CellWidth: number;\r\n  CellHeight: number;\r\n  LineWidth: number;\r\n}\r\n\r\ntype SetStateHandler = (newState: ISettings) => void;\r\n\r\ninterface ISettingsStore {\r\n  state: ISettings;\r\n  setters: Dispatch<SetStateAction<ISettings>>[];\r\n  setState: SetStateHandler;\r\n}\r\n\r\nclass SettingsStore implements ISettingsStore {\r\n  state: ISettings = {\r\n    CellWidth: 20,\r\n    CellHeight: 20,\r\n    LineWidth: 2,\r\n  };\r\n  setters: Dispatch<SetStateAction<ISettings>>[] = [];\r\n  setState: SetStateHandler = (newState: ISettings) => {\r\n    this.state = newState;\r\n    this.setters.forEach((setter) => setter(this.state));\r\n  }\r\n}\r\n\r\nconst store: ISettingsStore = new SettingsStore();\r\nstore.setState.bind(store);\r\n\r\nexport function useSettings(): [ settings: ISettings, setSettings: (newState: ISettings) => void ] {\r\n  const [ state, setState ] = useState(store.state);\r\n  if(!store.setters.includes(setState)) {\r\n    store.setters.push(setState);\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.setters = store.setters.filter(setter => setter !== setState);\r\n    }\r\n  }, []);\r\n\r\n  return [ state, store.setState ];\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useSettings } from '../settingHooks';\r\nimport { EWallPosition, ICellModel } from './Cell.model';\r\n\r\nexport interface ICellProps {\r\n  cell: ICellModel;\r\n}\r\n\r\nconst Cell: React.FC<ICellProps> = ({ cell }) => {\r\n  const [{ CellHeight, CellWidth, LineWidth }] = useSettings();\r\n  const [ pathData, setPathData ] = useState('');\r\n  useEffect(() => {\r\n    const { walls, x, y } = cell;\r\n    const moveTo = `M${x * CellWidth} ${y * CellHeight}`;\r\n    const leftWall = walls[EWallPosition.Left];\r\n    const left = `${leftWall ? 'l' : 'm'}0 ${CellHeight}`;\r\n    const bottomWall = walls[EWallPosition.Bottom];\r\n    const bottom = `${bottomWall ? 'l' : 'm'}${CellWidth} 0`;\r\n    const rightWall = walls[EWallPosition.Right];\r\n    const right = `${rightWall ? 'l' : 'm'}0 -${CellHeight}`;\r\n    const topWall = walls[EWallPosition.Top];\r\n    const top = `${topWall ? 'l' : 'm'}-${CellWidth} 0`;\r\n    const pathData = `${moveTo} ${left} ${bottom} ${right} ${top}`;\r\n    setPathData(pathData);\r\n  }, [ CellHeight, CellWidth, cell ]);\r\n  return <path stroke=\"#333\" fill=\"none\" d={pathData} strokeWidth={LineWidth} />;\r\n};\r\nexport default Cell;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Cell from '../cell/Cell';\r\nimport { ICellModel } from '../cell/Cell.model';\r\nimport { useSettings } from '../settingHooks';\r\nimport { LabyrinthCells } from './Labyrinth.model';\r\n\r\nexport interface ILabyrinthProps {\r\n  cells: LabyrinthCells;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\nconst Labyrinth: React.FC<ILabyrinthProps> = ({ cells, height, width }) => {\r\n  const [viewbox, setViewBox] = useState<string>(`0 0 400 400`);\r\n  const [{ CellHeight, CellWidth }] = useSettings();\r\n  useEffect(() => {\r\n    const newViewbox = `0 0 ${width * CellWidth} ${height * CellHeight}`;\r\n    setViewBox(newViewbox);\r\n  }, [height, width, CellHeight, CellWidth]);\r\n  const drawRow = (cells: ICellModel[], index: number) => (\r\n    <g className=\"row\" key={index}>\r\n      {cells.map((cell) => (\r\n        <Cell cell={cell} key={`${cell.x}-${cell.y}`} />\r\n      ))}\r\n    </g>\r\n  );\r\n  const field = <>{cells.map(drawRow)}</>;\r\n  return (\r\n    <>\r\n      <svg id=\"labyrinth\" className=\"labyrinth-canvas\" xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox}>\r\n        <g className=\"labyrinth-box\">\r\n          {field}\r\n        </g>\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\nexport default Labyrinth;\r\n","import {\n  Alignment,\n  Button,\n  Card,\n  Classes,\n  Drawer,\n  Elevation,\n  FormGroup,\n  H5,\n  HTMLSelect,\n  Navbar,\n  NumericInput,\n  Position,\n} from '@blueprintjs/core';\nimport React, { useState } from 'react';\n\nimport './App.css';\nimport { EGeneratorAlgorythm, getGenerator, SupportedAlgorythms } from './generator';\nimport Labyrinth from './labyrinth/Labyrinth';\nimport { initLabyrinth, LabyrinthCells } from './labyrinth/Labyrinth.model';\nimport { useSettings } from './settingHooks';\n\nfunction print() {\n  const l = document.getElementById('labyrinth');\n  if (!l) {\n    return;\n  }\n  const a = window.open('', '', 'height=640, width=640');\n  if (!a) {\n    return;\n  }\n  a.document.write('<html>');\n  a.document.write('<body>');\n  a.document.write(l.outerHTML);\n  a.document.write('</body></html>');\n  a.document.close();\n  a.print();\n}\n\nfunction App() {\n  const [width, setWidth] = useState(20);\n  const [height, setHeight] = useState(20);\n  const [settings, setSettings] = useSettings();\n  const [drawer, toggleDrawer] = useState(false);\n  const [cells, setCells] = useState<LabyrinthCells>([]);\n  const [algorythm, setAlgorythm] = useState<EGeneratorAlgorythm>(SupportedAlgorythms[0].value);\n  const toggleHandler = () => toggleDrawer(!drawer);\n  const setCellWidth = (CellWidth: number) =>\n    setSettings({\n      ...settings,\n      CellWidth,\n    });\n  const setCellHeight = (CellHeight: number) =>\n    setSettings({\n      ...settings,\n      CellHeight,\n    });\n  const setLineWidth = (LineWidth: number) =>\n    setSettings({\n      ...settings,\n      LineWidth,\n    });\n  const generateMaze = () => {\n    const l = initLabyrinth(height, width);\n    const generator = getGenerator(algorythm);\n    const newCells = generator(l);\n    setCells(newCells);\n  };\n  return (\n    <>\n      <div className={`App ${Classes.DARK}`}>\n        <Navbar>\n          <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>Maze builder</Navbar.Heading>\n            <Button onClick={generateMaze} icon=\"function\" />\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            <Button icon=\"print\" minimal={true} onClick={print} />\n            <Navbar.Divider />\n            <Button icon=\"cog\" minimal={true} onClick={toggleHandler} />\n          </Navbar.Group>\n        </Navbar>\n        <div className=\"App-body\">\n          <Card className=\"labyrinth-card\" elevation={Elevation.THREE}>\n            <Labyrinth cells={cells} height={height} width={width} />\n          </Card>\n        </div>\n      </div>\n      <Drawer\n        isOpen={drawer}\n        onClose={toggleHandler}\n        position={Position.LEFT}\n        size={Drawer.SIZE_SMALL}\n        title=\"Settings\"\n        className={Classes.DARK}>\n        <Card className=\"settings-card\">\n          <H5>Labyrinth size</H5>\n          <div className=\"size-settings\">\n            <FormGroup label=\"Width\" labelFor=\"width-input\" inline={true}>\n              <NumericInput id=\"width-input\" onValueChange={setWidth} value={width} />\n            </FormGroup>\n            <FormGroup label=\"Height\" labelFor=\"height-input\" inline={true}>\n              <NumericInput id=\"height-input\" onValueChange={setHeight} value={height} />\n            </FormGroup>\n          </div>\n        </Card>\n        <Card className=\"settings-card\">\n          <H5>Drawing settings</H5>\n          <div className=\"draw-settings\">\n            <FormGroup label=\"Cell width\" labelFor=\"cell-width-input\" inline={true}>\n              <NumericInput id=\"cell-width-input\" onValueChange={setCellWidth} value={settings.CellWidth} />\n            </FormGroup>\n            <FormGroup label=\"Cell height\" labelFor=\"cell-height-input\" inline={true}>\n              <NumericInput id=\"cell-height-input\" onValueChange={setCellHeight} value={settings.CellHeight} />\n            </FormGroup>\n            <FormGroup label=\"Line width\" labelFor=\"line-width-input\" inline={true}>\n              <NumericInput id=\"line-width-input\" onValueChange={setLineWidth} value={settings.LineWidth} />\n            </FormGroup>\n          </div>\n        </Card>\n        <Card className=\"algorythm-card\">\n          <H5>Algorythm settings</H5>\n          <div className=\"algorythm-settings\">\n            <HTMLSelect fill={true} options={SupportedAlgorythms} value={algorythm} onChange={(e) => setAlgorythm(+e.target.value as EGeneratorAlgorythm)} />\n          </div>\n        </Card>\n      </Drawer>\n    </>\n  );\n}\n\nexport default App;\n","import { createClosedCell, ICellModel, removeBottomWall, removeTopWall } from '../cell/Cell.model';\r\n\r\nexport type LabyrinthCells = ICellModel[][];\r\n\r\nexport interface ILabyrinthModel {\r\n  height: number;\r\n  width: number;\r\n  cells: LabyrinthCells;\r\n}\r\n\r\nexport function initLabyrinth(height: number, width: number, _cells?: LabyrinthCells) {\r\n  let cells = _cells;\r\n  if (!cells) {\r\n    cells = [];\r\n    for (let y = 0; y < height; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < width; x++) {\r\n        let cell = createClosedCell(x, y);\r\n        if (x === 0 && y === 0) {\r\n          cell = removeTopWall(cell);\r\n        }\r\n        if (x === width - 1 && y === height - 1) {\r\n          cell = removeBottomWall(cell);\r\n        }\r\n        row.push(cell);\r\n      }\r\n      cells.push(row);\r\n    }\r\n  }\r\n  return {\r\n    height,\r\n    width,\r\n    cells,\r\n  } as ILabyrinthModel;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import '@blueprintjs/core/lib/css/blueprint.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}